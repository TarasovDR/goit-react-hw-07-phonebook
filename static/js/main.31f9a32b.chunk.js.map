{"version":3,"sources":["redux/actions/contacts-actions.js","redux/reducers/contacts-reducer.js","redux/store/store.js","components/SubTitle/SubTitle.styled.jsx","components/SubTitle/SubTitle.jsx","redux/selectors/contacts-selectors.js","services/api.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/operations/contacts-operations.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","contactsActions","_","actions","payload","state","filter","id","loading","error","action","combineReducers","store","configureStore","reducer","contacts","contactsReducer","devTools","process","middleware","getDefaultMiddleware","logger","SectionTitle","Title","text","getFilter","getContacts","selectors","isLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","axios","defaults","baseURL","fetchContacts","a","get","data","addContact","post","deleteContact","delete","Form","Label","Input","AddButton","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","find","toast","newContact","api","addedContact","operations","SubTitle","type","pattern","title","required","onChange","placeholder","ContactContainer","ContactItem","ContactButton","ContactList","onDeleteContact","deletedContact","useEffect","map","onClick","Wrapper","Container","children","LabelFilter","InputFilter","connect","target","Section","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31f9a32b.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n// import { v4 as uuidv4 } from 'uuid';\n\n// export const addContact = createAction('contacts/Add', (name, number) => ({\n//   payload: {\n//     id: `id-${uuidv4()}`,\n//     name,\n//     number,\n//   },\n// }));\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('filter/Change');\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport * as contactsActions from 'redux/actions/contacts-actions';\n\n// import {\n//   addContact,\n//   deleteContact,\n//   changeFilter,\n// } from '../actions/contacts-actions';\n\n// export const contactReducer = createReducer([], {\n//   [addContact]: (state, { payload }) =>\n//     state.some(\n//       ({ name, number }) => name === payload.name && number === payload.number,\n//     )\n//       ? alert(`${payload.name} is already in contacts`)\n//       : [...state, payload],\n\n//   [deleteContact]: (state, { payload }) =>\n//     state.filter(contact => contact.id !== payload),\n// });\n\n// export const filterReducer = createReducer('', {\n//   [changeFilter]: (_, { payload }) => payload,\n// });\n\nconst items = createReducer([], {\n  [contactsActions.fetchContactsSuccess]: (_, actions) => actions.payload,\n  [contactsActions.addContactSuccess]: (state, actions) => [\n    ...state,\n    actions.payload,\n  ],\n  [contactsActions.deleteContactSuccess]: (state, actions) =>\n    state.filter(({ id }) => id !== actions.payload),\n});\n\nconst loading = createReducer(false, {\n  [contactsActions.addContactRequest]: () => true,\n  [contactsActions.addContactSuccess]: () => false,\n  [contactsActions.addContactError]: () => false,\n  [contactsActions.deleteContactRequest]: () => true,\n  [contactsActions.deleteContactSuccess]: () => false,\n  [contactsActions.deleteContactError]: () => false,\n  [contactsActions.fetchContactsRequest]: () => true,\n  [contactsActions.fetchContactsSuccess]: () => false,\n  [contactsActions.fetchContactsError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {\n  [contactsActions.fetchContactsError]: (_, action) => action.payload,\n  [contactsActions.fetchContactsRequest]: () => null,\n});\n\nexport default combineReducers({\n  items,\n  loading,\n  error,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\n// import { setupListeners } from '@reduxjs/toolkit/query';\nimport logger from 'redux-logger';\n// import { contactApi } from 'redux/contacts/contact-slice';\n\nimport contactsReducer from 'redux/reducers/contacts-reducer';\n\n// const middleware = [...getDefaultMiddleware(), logger];\n\n// const store = configureStore({\n//   reducer: {\n//     contacts: contactReducer,\n//     [contactApi.reducerPath]: contactApi.reducer,\n//   },\n//   devTools: process.env.NODE_ENV === 'development',\n//   middleware: getDefaultMiddleware => [\n//     ...getDefaultMiddleware(),\n//     contactApi.middleware,\n//   ],\n// });\n\n// setupListeners(store.dispatch);\n// export { store };\n\nconst store = configureStore({\n  reducer: { contacts: contactsReducer },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), logger],\n});\n\nexport default store;\n","import styled from '@emotion/styled/macro';\n\nexport const SectionTitle = styled.h3`\n  padding-bottom: 12px;\n  text-align: left;\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionTitle } from './SubTitle.styled';\n\nconst Title = ({ text }) => {\n  return <SectionTitle>{text}</SectionTitle>;\n};\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilter = state => state.contacts.filter;\nconst getContacts = state => state.contacts.items;\nconst isLoading = state => state.contacts.loading;\n\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n    return visibleContacts;\n  },\n);\n\nconst selectors = {\n  getFilter,\n  getContacts,\n  isLoading,\n  getVisibleContacts,\n};\n\nexport default selectors;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://611d61397d273a0017e2f7c7.mockapi.io/api/v1';\n\nexport const fetchContacts = async () => {\n  const { data } = await axios.get(`/contacts`);\n  return data;\n};\n\nexport const addContact = async contact => {\n  const { data } = await axios.post(`/contacts`, contact);\n  return data;\n};\n\nexport const deleteContact = async id => {\n  await axios.delete(`/contacts/${id}`);\n  return id;\n};\n","import styled from '@emotion/styled/macro';\n\nexport const Form = styled.form`\n  margin-bottom: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  max-width: 450px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  margin: 0 auto;\n  display: block;\n\n  & svg {\n    position: absolute;\n    top: 41px;\n    left: 5px;\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  width: 100%;\n  margin-bottom: 20px;\n  padding-left: 32px;\n  padding-right: 8px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  border-radius: 4px;\n  border: 2px solid #dadada;\n\n  font-size: 1.1rem;\n\n  &:focus {\n    outline: none;\n    border-color: #00b150;\n  }\n`;\n\nexport const AddButton = styled.button`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  padding: 10px;\n  background: linear-gradient(to top, #f1f1f1, #ffffff);\n  border: none;\n  border-radius: 4px;\n  font-size: 1.05rem;\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  & svg {\n    width: 20px;\n    height: 20px;\n    margin-right: 12px;\n    color: #00b150;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport SubTitle from 'components/SubTitle';\n// import { connect } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport selectors from 'redux/selectors/contacts-selectors';\nimport * as operations from 'redux/operations/contacts-operations';\n// import { addContact } from 'redux/actions/contacts-actions;';\nimport { Form, Label, Input, AddButton } from './ContactForm.styled';\nimport { TiUserAdd, TiUser, TiPhone } from 'react-icons/ti';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectors.getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      toast(`${name} is already in the contact list`);\n    }\n    dispatch(operations.addContact(name, number));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        <SubTitle text={'Name'} />\n        <TiUser />\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          placeholder=\"Name\"\n          value={name}\n        />\n      </Label>\n      <Label>\n        <SubTitle text={'Number'} />\n        <TiPhone />\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          placeholder=\"+xxx xx xxx-xx-xx\"\n          value={number}\n        />\n      </Label>\n\n      <AddButton type=\"submit\">\n        <TiUserAdd />\n        Add contact\n      </AddButton>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import * as contactsActions from 'redux/actions/contacts-actions';\nimport * as api from 'services/api';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n  try {\n    const contacts = await api.fetchContacts();\n    dispatch(contactsActions.fetchContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const newContact = {\n    name,\n    number,\n  };\n  dispatch(contactsActions.addContactRequest());\n  try {\n    const addedContact = await api.addContact(newContact);\n    dispatch(contactsActions.addContactSuccess(addedContact));\n  } catch (error) {\n    dispatch(contactsActions.addContactError(error));\n  }\n};\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(contactsActions.deleteContactRequest());\n  try {\n    const deletedContact = await api.deleteContact(id);\n    dispatch(contactsActions.deleteContactSuccess(deletedContact));\n  } catch (error) {\n    dispatch(contactsActions.deleteContactError(error));\n  }\n};\n","import styled from '@emotion/styled/macro';\n\nexport const ContactContainer = styled.ul`\n  width: 100%;\n  max-width: 450px;\n  margin: 0 auto;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border-radius: 3px;\n  color: black;\n  background-color: #fff;\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);\n\n  font-size: 1.1rem;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const ContactButton = styled.button`\n  display: flex;\n  align-content: center;\n  padding: 6px 10px;\n  background: linear-gradient(to top, #e0e0e0, #f2f2f2);\n  border: none;\n  border-radius: 4px;\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  & svg {\n    width: 16px;\n    height: 16px;\n    margin-right: 12px;\n    color: #ff1e1e;\n  }\n`;\n","import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { deleteContact } from '../../redux/actions/contacts-actions';\nimport { MdRemoveCircle } from 'react-icons/md';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport selectors from 'redux/selectors/contacts-selectors';\nimport * as operations from 'redux/operations/contacts-operations';\nimport {\n  ContactContainer,\n  ContactItem,\n  ContactButton,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectors.getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    dispatch(operations.deleteContact(id));\n  };\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactContainer>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem key={id} name={name} number={number}>\n          <span>{name}:</span>\n          <span>{number}</span>\n          <ContactButton onClick={() => onDeleteContact(id)}>\n            <MdRemoveCircle />\n            Delete\n          </ContactButton>\n        </ContactItem>\n      ))}\n    </ContactContainer>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n\n  // onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled/macro';\n\nexport const Wrapper = styled.div`\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  background-color: #fff;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  border-radius: 3px;\n`;\n","import { Wrapper } from './Container.styled';\n\nconst Container = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nexport default Container;\n","import styled from '@emotion/styled/macro';\n\nexport const LabelFilter = styled.label`\n  position: relative;\n  margin: 0 auto;\n  display: block;\n\n  & svg {\n    position: absolute;\n    top: 44px;\n    left: 141px;\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const InputFilter = styled.input`\n  height: 40px;\n  width: 300px;\n  margin-bottom: 20px;\n  padding-left: 38px;\n  padding-right: 8px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  border-radius: 4px;\n  border: 2px solid #dadada;\n\n  font-size: 1.1rem;\n\n  &:focus {\n    outline: none;\n    border-color: #0079b1;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport SubTitle from 'components/SubTitle';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/actions/contacts-actions';\n\nimport { LabelFilter, InputFilter } from './Filter.styled';\nimport { ImSearch } from 'react-icons/im';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <LabelFilter>\n      <SubTitle text={'Find Contacts by name'} />\n      <ImSearch />\n      <InputFilter type=\"text\" value={value} onChange={onChange} />\n    </LabelFilter>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import styled from '@emotion/styled/macro';\n\nexport const Wrapper = styled.section`\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n","import { Wrapper } from './Section.styled';\n\nconst Section = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nexport default Section;\n","import styled from '@emotion/styled/macro';\n\nexport const SectionTitle = styled.h2`\n  padding-bottom: 20px;\n  font-size: 2rem;\n  font-weight: 600;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionTitle } from './Title.styled';\n\nconst Title = ({ text }) => {\n  return <SectionTitle>{text}</SectionTitle>;\n};\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Container from 'components/Container';\nimport Filter from 'components/Filter';\nimport Section from 'components/Section';\nimport Title from 'components/Title';\n\nexport default function App() {\n  return (\n    <Section>\n      <Container>\n        <Title text=\"Phonebook\" />\n        <ContactForm />\n        <Title text=\"Contacts\" />\n        <Filter />\n        <ContactList />\n      </Container>\n    </Section>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}